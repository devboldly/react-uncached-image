{"version":3,"sources":["webpack:///../src/components/UncachedImage.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","UncachedImage","src","isMDXComponent"],"mappings":"ggBAQO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,uCACA,iBAAQ,CACN,GAAM,eADR,eAGA,wFAAuE,0BAAYC,WAAW,KAAvB,OAAvE,8EACA,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4DAIL,yDAAwC,0BAAYA,WAAW,KAAvB,OAAxC,kBACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,0DAA6DC,SAAO,GACrGL,QACAH,kBACAS,eACAC,UACAC,mBALqG,gBAMrGX,IANqG,EAOrGH,eAPqG,GAQpGO,QAAQ,cACb,YAAC,IAAD,CAAeQ,IAAI,kCAAkCR,QAAQ,mBAE3D,4GACA,uBAAM,uBACN,iCAAgB,0BAAYC,WAAW,KAAvB,OAAhB,wCAAwG,0BAAYA,WAAW,KAAvB,OAAxG,wGACA,4DAA2C,mBAAGA,WAAW,KAAQ,CAC7D,KAAQ,6BAD+B,mBAA3C,uJAGA,iBAAQ,CACN,GAAM,SADR,SAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,QAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,eAGA,oBAAIA,WAAW,MAAS,CACtB,MAAS,OACR,0BAAYA,WAAW,MAAvB,UAFH,YAEqE,0BAAYA,WAAW,MAAvB,cACrE,oBAAIA,WAAW,MAAS,CACtB,MAAS,OADX,4OAMN,gDAA+B,sBAAQA,WAAW,KAAnB,OAA+B,0BAAYA,WAAW,UAAvB,OAA/B,UAA/B,aAAmJ,0BAAYA,WAAW,KAAvB,OAAnJ,KAAwM,0BAAYA,WAAW,KAAvB,aAAxM,KAAmQ,0BAAYA,WAAW,KAAvB,SAAnQ,SAA8T,0BAAYA,WAAW,KAAvB,WAA9T,sBAAwY,0BAAYA,WAAW,KAAvB,OAAxY,aACA,iBAAQ,CACN,GAAM,WADR,WAGA,kEAAiD,0BAAYA,WAAW,KAAvB,OAAjD,wBAAyH,0BAAYA,WAAW,KAAvB,iBAAzH,gBACA,yEAAwD,0BAAYA,WAAW,KAAvB,mCAAxD,8DACA,2HACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,wmBAAqnBC,SAAO,GAC7pBL,QACAH,kBACAS,eACAC,UACAC,mBAL6pB,gBAM7pBX,IAN6pB,EAO7pBH,eAP6pB,GAQ5pBO,QAAQ,cACb,qIAIA,mBAAKQ,IAAI,oCACT,mBAAKA,IAAI,oCACT,mBAAKA,IAAI,oCACT,kCACY,4CADZ,mHAKA,YAAC,IAAD,CAAeA,IAAI,kCAAkCR,QAAQ,kBAC7D,YAAC,IAAD,CAAeQ,IAAI,kCAAkCR,QAAQ,kBAC7D,YAAC,IAAD,CAAeQ,IAAI,kCAAkCR,QAAQ,mBAE3D,6G,yMAKJH,EAAWY,gBAAiB","file":"component---src-components-uncached-image-mdx-84281d0c1d1e8781fcd8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-uncached-image/react-uncached-image/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { UncachedImage } from './UncachedImage';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>UncachedImage</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`An UncachedImage adds a cache-busting query param to your image `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{` to ensure the browser requests the image from the server on every render.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { UncachedImage } from 'react-uncached-image';\n`}</code></pre>\n    <p>{`Use just like you would a normal `}<inlineCode parentName=\"p\">{`img`}</inlineCode>{` tag in React:`}</p>\n    <Playground __position={1} __code={'<UncachedImage src=\\\"https://loremflickr.com/320/240\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      UncachedImage,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <UncachedImage src=\"https://loremflickr.com/320/240\" mdxType=\"UncachedImage\" />\n    </Playground>\n    <small>Note: You can edit the source above. Your changes will be rendered immediately.</small>\n    <br /><br />\n    <p>{`Pass the `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{` for the image, as well as any other `}<inlineCode parentName=\"p\">{`img`}</inlineCode>{` props you'd like. The image will automatically include a query param that's used to bust the cache.`}</p>\n    <p>{`The service used to get this image, `}<a parentName=\"p\" {...{\n        \"href\": \"https://loremflickr.com/\"\n      }}>{`loremflickr.com`}</a>{`, returns a different image on every request. Because cache busting is being used, the image is not cached and is likely different on every render.`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Prop`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`cacheBuster`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Optional. You can provide your own cache buster, which will be URI encoded and added as a query parameter. If you make this constant, cache-busting will effectively be disabled. When not specified, one is generated automatically.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`This component supports `}<strong parentName=\"p\">{`all `}<inlineCode parentName=\"strong\">{`img`}</inlineCode>{` props`}</strong>{`, such as `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`onClick`}</inlineCode>{`. It renders as an `}<inlineCode parentName=\"p\">{`img`}</inlineCode>{` element.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`The following example shows three regular `}<inlineCode parentName=\"p\">{`img`}</inlineCode>{` elements, and three `}<inlineCode parentName=\"p\">{`UncachedImage`}</inlineCode>{` components.`}</p>\n    <p>{`The image source for all six images is the same: `}<inlineCode parentName=\"p\">{`https://loremflickr.com/320/240`}</inlineCode>{`. This service returns a different image on every request.`}</p>\n    <p>{`The first three are likely the same, while the three uncached images will likely all be different.`}</p>\n    <Playground __position={4} __code={'<p>\\n  These three images share the same source. They\\'ve been cached by your\\n  browser and likely repeat three times.\\n</p>\\n<img src=\\\"https://loremflickr.com/320/240\\\" />\\n<img src=\\\"https://loremflickr.com/320/240\\\" />\\n<img src=\\\"https://loremflickr.com/320/240\\\" />\\n<p>\\n  These use <code>{`<UncachedImage/>`}</code>, which uses client-side cache\\n  busting. They\\'ve all incurred a trip to the server and are likely all\\n  different.\\n</p>\\n<UncachedImage src=\\\"https://loremflickr.com/320/240\\\" />\\n<UncachedImage src=\\\"https://loremflickr.com/320/240\\\" />\\n<UncachedImage src=\\\"https://loremflickr.com/320/240\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      UncachedImage,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <p>\n    These three images share the same source. They've been cached by your\n    browser and likely repeat three times.\n  </p>\n  <img src=\"https://loremflickr.com/320/240\" />\n  <img src=\"https://loremflickr.com/320/240\" />\n  <img src=\"https://loremflickr.com/320/240\" />\n  <p>\n    These use <code>{`<UncachedImage/>`}</code>, which uses client-side cache\n    busting. They've all incurred a trip to the server and are likely all\n    different.\n  </p>\n  <UncachedImage src=\"https://loremflickr.com/320/240\" mdxType=\"UncachedImage\" />\n  <UncachedImage src=\"https://loremflickr.com/320/240\" mdxType=\"UncachedImage\" />\n  <UncachedImage src=\"https://loremflickr.com/320/240\" mdxType=\"UncachedImage\" />\n    </Playground>\n    <small>Note: You can edit the source above. Your changes will be rendered immediately.</small>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}